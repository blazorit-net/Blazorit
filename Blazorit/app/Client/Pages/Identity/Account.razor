@page "/account"
@using Blazorit.Shared.Models.Identity
@using Blazorit.Client.Providers.Concrete.Identity
@using Blazorit.Client.Services.Abstract.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager 
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<AuthorizeView>
    <h3>Hi! You're logged in with <i>@context.User.Identity?.Name</i>.</h3>
    <button class="btn btn-warning" onclick="@(() => Logout())">Logout</button>
</AuthorizeView>
<p></p>

<h5>Change Password</h5>

<EditForm Model="request" OnValidSubmit="ChangePassword">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="password">New Password</label>
        <InputText id="password" @bind-Value="request.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => request.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm New Password</label>
        <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => request.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Apply</button>
</EditForm>
@message

@code {
    UserChangePassword request = new UserChangePassword();
    string message = string.Empty;

    private async Task ChangePassword()
    {
        var result = await IdentityService.ChangePassword(request);
        message = result.Message;
    }


    private async Task Logout() {
        var authProvider = (CustomAuthStateProvider)AuthenticationStateProvider;
        await authProvider.LogoutAuthenticationStateAsync();
        NavigationManager.NavigateTo("/", true);
    }
}
