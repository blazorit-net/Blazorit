@attribute [Route($"{ConstPage.PROCESSED_ORDER}")]

@using Blazorit.Client.Shared.Routes.ECommerce.Domain
@using Blazorit.Client.Support.Enums
@using Blazorit.Client.Pages.ECommerce.Domain.Components.OrderCards

@implements IBlazoritComponent

@*TODO: delete this info*@
@*<h1>Proccesed order page</h1>
<div>PaymentSuccess: @PaymentSuccess</div>
<div>PaymentInfo: @PaymentInfo</div>
<div>PaymentToken: @PaymentToken</div>
<div>PaymentAmount: @PaidAmount</div>*@

<div class="@(((IBlazoritComponent)this).GetClass("bit-processed-order-page"))">
    @if (isSuccessOrder == Tribool.True)
    {
        <GridRow>
            <GridCol Span="24">
                <Result Status="success"
                    Title="Successfully Purchased"
                    SubTitle=@($"Order №{orderData.OrderId.ToString()} is processed")>
                    <Extra>
                        <Button OnClick="@(() => Navigation.NavigateTo("/"))">Go back to main page</Button>
                    </Extra>
                </Result>
            </GridCol>
        </GridRow>
        <Divider />
        <GridRow>
            <GridCol Span="24">
                <GridRow>
                    <GridCol Offset=5 Span="14">
                        <Card>
                            <OrderCard OrderData="@orderData" />
                        </Card>
                    </GridCol>
                </GridRow>               
            </GridCol>
        </GridRow>

    } 
    else if (isSuccessOrder == Tribool.False)
    {
        <Result Status="warning" Title="There are some problems with your operation." />    
    }
    else //while the result of the execution has not yet been received
    {
        <Result Title="Your operation in process... Wait, please." />
    }
</div>