@page "/signup"
@using Blazorit.Client.Shared.Routes.ECommerce;
@using Blazorit.Shared.Models.Identity
@using Blazorit.Client.Services.Abstract.Identity
@inject IIdentityService IdentityService
@inject NavigationManager Navigation

<PageTitle>Sign up</PageTitle>

<GridRow>
    <GridCol Xs="24" Lg="12" Xxl=8>
        <Card Title="Sign up">
            <Body>
                <Form Loading="loading" Model="@userModel"
                      LabelColSpan="8"
                      OnFinish="HandleRegistration">
                    <FormItem Label="Username">
                        <Input @bind-Value="@context.UserName" />
                    </FormItem>
                    <FormItem Label="Password">
                        <InputPassword @bind-Value="@context.Password" />
                    </FormItem>
                    <FormItem Label="Confirm Password">
                        <InputPassword @bind-Value="@context.ConfirmPassword" />
                    </FormItem>
                    <FormItem WrapperColOffset="8">
                        <Button Type="@ButtonType.Primary" HtmlType="submit">
                            Sign up
                        </Button>
                    </FormItem>
                </Form>

                @if (!string.IsNullOrEmpty(message)) {
                    <div style="text-align:center;">
                        <Tag Color="@messageCssClass">@message</Tag>
                    </div>
                }
            </Body>
        </Card>
    </GridCol>
</GridRow>


@*<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="userName">UserName</label>
        <InputText id="userName" @bind-Value="user.UserName" class="form-control" />
        <ValidationMessage For="@(() => user.UserName)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>*@


@code {
    private bool loading = false;

    private UserRegister userModel = new UserRegister();

    private string message = string.Empty;
    private string messageCssClass = string.Empty;


    private async Task HandleRegistration()
    {
        message = string.Empty;
        loading = true;

        var result = await IdentityService.Register(userModel);
        message = result.Message;

        if (result.Success) {          
            messageCssClass = PresetColor.Green.ToString();
            message = "Success. You'll be redirected to Login...";
            StateHasChanged();                      
            await Task.Delay(TimeSpan.FromSeconds(1)); //sleep, so that user can have time to read 'Success'

            Navigation.NavigateTo(ConstPage.USER_LOGIN);
        } else {
            messageCssClass = PresetColor.Red.ToString();
        }        

        loading = false;
    }
}
