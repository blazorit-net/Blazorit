@page "/login"
@using Blazorit.Shared.Models.Identity
@using Blazorit.Client.Services.Abstract.Identity
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@inject IIdentityService IdentityService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Sign in</PageTitle>

<GridRow>
    <GridCol Xs="24" Lg="12" Xxl=8>
        <Card Title="Sign in">
            <Body>
                <Form Loading="loading" Model="@userModel"
                      LabelColSpan="6"

                      OnFinish="HandleLogin">
                    <FormItem Label="Username">
                        <Input @bind-Value="@context.UserName" />
                    </FormItem>
                    <FormItem Label="Password">
                        <InputPassword @bind-Value="@context.Password" />
                    </FormItem>
                    @*    <FormItem WrapperColOffset="8" WrapperColSpan="16">
                    <Checkbox @bind-Value="context.RememberMe">Remember me</Checkbox>
                    </FormItem>*@
                    <FormItem WrapperColOffset="6" >
                        <Button Type="@ButtonType.Primary" HtmlType="submit">
                            Sign in
                        </Button>
                    </FormItem>
                </Form>

                @if (!string.IsNullOrEmpty(message)) {
                    <div style="text-align:center;">
                        <Tag Color="@messageCssClass">@message</Tag>
                    </div>
                }
            </Body>
        </Card>
    </GridCol>
</GridRow>


@*<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="userName">UserName</label>
        <InputText id="userName" @bind-Value="user.UserName" class="form-control" />
        <ValidationMessage For="@(() => user.UserName)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>*@


@code {
    bool loading = false;

    private UserLogin userModel = new UserLogin();

    private string message = string.Empty;
    string messageCssClass = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url.ToString();
        }
    }

    private async Task HandleLogin()
    {
        message = string.Empty;
        loading = true;

        var result = await IdentityService.Login(userModel);
        if (result.Success)
        {
            message = string.Empty;

            await LocalStorage.SetItemAsync("identityToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();            
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            messageCssClass = PresetColor.Red.ToString();
            message = result.Message;
        }

        loading = false;
    }
}
